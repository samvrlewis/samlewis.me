<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Sam Lewis</title><link href="http://www.samlewis.me/" rel="alternate"></link><link href="http://www.samlewis.me/feeds/all-en.atom.xml" rel="self"></link><id>http://www.samlewis.me/</id><updated>2016-09-26T00:00:00+10:00</updated><entry><title>Unit testing embedded code with cmocka</title><link href="http://www.samlewis.me/2016/09/embedded-unit-testing-with-cmocka" rel="alternate"></link><published>2016-09-26T00:00:00+10:00</published><updated>2016-09-26T00:00:00+10:00</updated><author><name>Sam Lewis</name></author><id>tag:www.samlewis.me,2016-09-26:2016/09/embedded-unit-testing-with-cmocka</id><summary type="html">&lt;h1&gt;Why unit test embedded software?&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/Unit_testing"&gt;Unit testing&lt;/a&gt; is a great software testing practice that gets a lot of love in web and application development but unfortunately isn't practiced as often in embedded/firmware development. This is a shame as the impacts of having a bug in firmware can be considerably more catastrophic than having a bug in a webapp. I've written this article in the hope of demonstrating some of the benefits that come when writing unit tests for embedded software and have also given a small toy example of how it's possible to unit test firmware using the &lt;code&gt;cmocka&lt;/code&gt; framework. &lt;/p&gt;
&lt;p&gt;System level embedded software testing is notoriously difficult, mainly because embedded software runs on bare metal hardware. While you can never completely get away from testing embedded software on real hardware, testing the logic in the embedded software through unit testing is very valuable and gets you a lot of the way there. If you still need convincing, some of the things I really like about having unit tests for my embedded code:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Allows you to develop your application layer logic without the need for any hardware, saving lots of time&lt;/li&gt;
&lt;li&gt;Gives you a greater appreciation and understanding of your hardware periphereals, as you need to understand their interfaces to write tests against them&lt;/li&gt;
&lt;li&gt;Less 'wtf' bugs that are impossible to track down in development/production&lt;/li&gt;
&lt;li&gt;Allows you to test your code against edge cases that otherwise hard to reproduce (eg: testing how your firmware reacts when your temperature sensor is used in negative temperatures)&lt;/li&gt;
&lt;li&gt;Testable code tends to be cleaner, modular and reusable code&lt;/li&gt;
&lt;li&gt;Takes some amount of pressure off your systems level testing&lt;/li&gt;
&lt;li&gt;Stops regressions, particularly if you integrate the tests into your build&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;There are a lot of unit testing frameworks for &lt;code&gt;C&lt;/code&gt; but for embedded testing, the framework I like best is &lt;a href="https://cmocka.org/"&gt;cmocka&lt;/a&gt;. I've looked at others in the past, such as &lt;a href="http://www.throwtheswitch.org/cmock/"&gt;cmock&lt;/a&gt; and &lt;a href="https://github.com/mity/cutest"&gt;cutest&lt;/a&gt; but cmocka stands out as having all testing &amp;amp; mocking functionality I need while having minimal dependencies. &lt;/p&gt;
&lt;p&gt;On caveat worth mentioning is that to properly use these frameworks, you'll most likely need to compiler your code with a different compiler to what your compile with for your hardware - both so that the framework can run and so that you can execute the tests on your workstation. However, this shouldn't present a major problem as long as you're not relying on non-standard or undefined compiler behaviour. Logic errors in your code will still be logic errors no matter what compiler you use to compile the code. &lt;/p&gt;
&lt;h1&gt;An example of unit testing C in an embedded context&lt;/h1&gt;
&lt;p&gt;To give a concrete example of how you could make use of &lt;code&gt;cmocka&lt;/code&gt; in an embedded context, I'll show the process of unit testing code for a temperature sensor. I've chosen the TI &lt;a href="http://www.ti.com/lit/ds/symlink/tmp101.pdf"&gt;TMP101&lt;/a&gt; as the temperature sensor, which is a temperature sensor that works over I2C. The complete listing of code &lt;a href="https://github.com/samvrlewis/cmocka-embedded-example/"&gt;is checked in on my github&lt;/a&gt;, the below text gives a rundown of how it all comes together. &lt;/p&gt;
&lt;p&gt;The first step as normal, is to write some code for the tmp101 sensor that can fetch a temperature. You can find the full code listing &lt;a href="https://github.com/samvrlewis/cmocka-embedded-example/blob/master/src/tmp101.c"&gt;on my github&lt;/a&gt;. It's also reproduced below. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;quot;tmp101.h&amp;quot;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;

&lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="n"&gt;TMP_BIT_RESOLUTION&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;0.0625&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="nf"&gt;tmp101_get_temperature&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
&lt;span class="p"&gt;{&lt;/span&gt;   
    &lt;span class="c1"&gt;// Need to set the TMP101 pointer register to point to the temp register&lt;/span&gt;
    &lt;span class="kt"&gt;uint8_t&lt;/span&gt; &lt;span class="n"&gt;pointer_address&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;i2c_transmit_blocking&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TMP101_ADDRESS&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;pointer_address&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="c1"&gt;// The TMP101 stores 12 bit samples that are retrieved in two byte blocks&lt;/span&gt;
    &lt;span class="kt"&gt;uint8_t&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="n"&gt;i2c_read_blocking&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TMP101_ADDRESS&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="c1"&gt;// the 1st byte is bits 12 to 4 of the sample and the 2nd byte is bits 4 to 0&lt;/span&gt;
    &lt;span class="c1"&gt;// see page 16 of the TMP_101 datasheet&lt;/span&gt;
    &lt;span class="kt"&gt;uint16_t&lt;/span&gt; &lt;span class="n"&gt;temperature_bits&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="c1"&gt;// The 12 bit sample is represented using 2s complement, for simplicity &lt;/span&gt;
    &lt;span class="c1"&gt;// (and because there&amp;#39;s no 12 bit int representation), scale up the sample&lt;/span&gt;
    &lt;span class="c1"&gt;// to 16 bits and adjust the bit resolution when converting later&lt;/span&gt;
    &lt;span class="kt"&gt;int16_t&lt;/span&gt; &lt;span class="n"&gt;temperature&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;temperature_bits&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="c1"&gt;// shift the sample back down and convert by the TMP_101 bit resolution&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;temperature&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mf"&gt;0.0625f&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This function isn't the most complicated function but there's enough bit manipulation to make me nervous and unsure if it'll do exactly what I want all the time. Sure, we could run it on my hardware platform and see how it responds but that'd only prove that it works as whatever temperature it is now. Instead, lets write some unit tests for this code. &lt;/p&gt;
&lt;p&gt;Conveniently, for this particular temperature sensor, TI are kind enough to provide a table of example temperatures with their corresponding 12 bit digital outputs. These prove a nice place to start in testing our &lt;code&gt;get_temperature&lt;/code&gt; function. &lt;/p&gt;
&lt;p&gt;&lt;img alt="table of sensor outputs" src="sensor_outputs.png" /&gt;&lt;/p&gt;
&lt;p&gt;In essence, we want to control the data that &lt;code&gt;i2c_read_blocking&lt;/code&gt; returns to our &lt;code&gt;tmp101_get_temperature&lt;/code&gt; function so that we can check against our function works as it should. A simple (but somewhat ugly) way to this might be to have the function look something like:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;i2c_read_blocking&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;uint8_t&lt;/span&gt; &lt;span class="n"&gt;address&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;uint8_t&lt;/span&gt; &lt;span class="n"&gt;offset&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;uint8_t&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;pData&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;uint8_t&lt;/span&gt; &lt;span class="n"&gt;data_size&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="cp"&gt;#ifdef TESTING&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;DUMMY_VALUE&lt;/span&gt;
    &lt;span class="cp"&gt;#endif&lt;/span&gt;

    &lt;span class="c1"&gt;//normal i2c logic here&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;But mixing test code with production code is ugly and an antipattern that should be avoided if possible. A much better way that allows us to both completely separate our testing and source code is to use the &lt;code&gt;cmocka&lt;/code&gt; framework to help us (dynamically!) control what our &lt;code&gt;i2c_read_blocking&lt;/code&gt; function does. The first step of using &lt;code&gt;cmocka&lt;/code&gt; is to define mocks for the functions you want to mock out. The two mocked functions are shown below.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;void __wrap_i2c_transmit_blocking(uint8_t address, uint8_t offset, uint8_t* data, uint8_t data_size)
{
    // allows the calling test to check if the supplied parameters are as expected
    check_expected(address);
    check_expected(offset);
}

void __wrap_i2c_read_blocking(uint8_t address, uint8_t offset, uint8_t* pData, uint8_t data_size) 
{
    // allow the calling test to specify the data it wants back
    // and copy it back out
    for(int i=0; i &amp;lt; data_size; i++) {
        pData[i] = mock_type(uint8_t);
    }
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;cmocka&lt;/code&gt; cleverly uses the linker to swap out the real function calls for the mocked ones. To allow for this, mocked out functions are prefixed with &lt;code&gt;__wrap_&lt;/code&gt;. The linker is then provided with the arguments &lt;code&gt;--wrap=i2c_read_blocking -Wl,--wrap=i2c_transmit_blocking&lt;/code&gt; which allows these functions to be mocked out. For a complete example of compiling/linking with cmocka, see the &lt;a href="https://github.com/samvrlewis/cmocka-embedded-example/blob/master/test/Makefile"&gt;makefile&lt;/a&gt; in my example project.&lt;/p&gt;
&lt;p&gt;With the mocks in place we can now write some tests! A complete look at the tests in my example project can be found &lt;a href="https://github.com/samvrlewis/cmocka-embedded-example/blob/master/test/test_tmp101.c"&gt;on my github&lt;/a&gt; but, as an example, here's a single test:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;static void test_negative_temperature(void **state)
{
    will_return(__wrap_i2c_read_blocking, 0b11100111);
    will_return(__wrap_i2c_read_blocking, 0b00000000);

    assert_true(tmp101_get_temperature() == -25);
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The two calls to &lt;code&gt;will_return&lt;/code&gt; set what the &lt;code&gt;i2c_read_blocking&lt;/code&gt; function writes into the &lt;code&gt;pData&lt;/code&gt; array. As per the datasheet, the 12 bit sample is returned over two bytes so these values correspond (from the above TI table) to -25 degrees celsius, which we check against. Much easier than having to stick the temperature sensor in the freezer!&lt;/p&gt;
&lt;p&gt;Running all of the tests through a Makefile gives this cool print out:&lt;/p&gt;
&lt;p&gt;&lt;img alt="cmocka output" src="cmocka_output.png" /&gt;&lt;/p&gt;
&lt;p&gt;Although this is just a simple example, it hopefully demonstrates the utility that having unit tests can provide. Having a suite of unit tests for a project gives developers a lot of confidence - I find unit tests especially useful in developing  application layer protocols on top of lower level protocols.&lt;/p&gt;
&lt;p&gt;If you're interested in poking around a little at the source for this example, see how it's all linked together an run as a test or even run it yourself, all code for this is avaliable &lt;a href="https://github.com/samvrlewis/cmocka-embedded-example/"&gt;on my github&lt;/a&gt; with instructions of how to run.&lt;/p&gt;
&lt;hr /&gt;

&lt;p&gt;I hope you found this article interesting, if you have any question please don't hesitate to let me know! &lt;/p&gt;</summary></entry><entry><title>Getting started with the xv6 operating system</title><link href="http://www.samlewis.me/2016/04/getting-started-xv6" rel="alternate"></link><published>2016-04-18T00:00:00+10:00</published><updated>2016-04-18T00:00:00+10:00</updated><author><name>Sam Lewis</name></author><id>tag:www.samlewis.me,2016-04-18:2016/04/getting-started-xv6</id><summary type="html">&lt;p&gt;xv6 is a nifty operating system that is essentially a reimplementation of &lt;a href="https://en.wikipedia.org/wiki/Version_6_Unix"&gt;Sixth Edition Unix&lt;/a&gt; that, unlike most of the huge montholithic Linux or BSD distributions that you'd run on your workstation or server, is simple enough to be used as a learning tool. Though xv6 lacks in functionality that you'd expect from a modern operating system, much of the core unix concepts and structure remain the same. xv6 is also very lightweight, only taking a few seconds to compile and allows remote debugging. This all makes it great for understanding how modern operating systems hang together. &lt;/p&gt;
&lt;p&gt;In fact, xv6 was developed by MIT as a teaching operating system for their &lt;a href="https://pdos.csail.mit.edu/6.828/2014/xv6.html"&gt;6.828 course&lt;/a&gt;. The course page for 6.828 is a great resource that MIT are kind enough to have publicly avaliable. &lt;/p&gt;
&lt;p&gt;MIT also produce a fantastic &lt;a href="https://pdos.csail.mit.edu/6.828/2014/xv6/book-rev8.pdf"&gt;xv6 reference book&lt;/a&gt; that provides commentary on the structure of the xv6 operating system. Additionally, the xv6 source actually self documents - the xv6 &lt;code&gt;make&lt;/code&gt; file contains a target (&lt;code&gt;make xv6.pdf&lt;/code&gt;) that generates a &lt;a href="https://pdos.csail.mit.edu/6.828/2014/xv6/xv6-rev8.pdf"&gt;pdf of the source code&lt;/a&gt;, which amazingly comes in under 100 pages and 10k lines of source (including comments!). Not bad for an entire, functional, operating system. &lt;/p&gt;
&lt;p&gt;xv6 is typically run virtualized using qemu on a Linux host machine. To get started with xv6, clone the xv6 repo:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git clone git://github.com/mit-pdos/xv6-public.git xv6
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Then to start it as a virtual machine under qemu:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cd xv6
make qemu
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If make fails, make sure you have your compiler toolchain installed. There's some good info on the &lt;a href="https://pdos.csail.mit.edu/6.828/2014/tools.html"&gt;6.282 tools page&lt;/a&gt;. For me, on Fedora, I needed to install gcc with &lt;code&gt;dnf install gcc&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Once you have your compiler toolchain working, qemu will pop up and you'll be presented with the xv6 shell. &lt;/p&gt;
&lt;p&gt;&lt;img alt="qemu xv6 shell" src="https://raw.githubusercontent.com/samvrlewis/samvrlewis.github.io/master/2016/04/getting-started-xv6/qemu.png" /&gt; &lt;/p&gt;
&lt;p&gt;From here, you'll be able to run a few simple commands like &lt;code&gt;ls&lt;/code&gt; and &lt;code&gt;cat&lt;/code&gt; and revel in the knowledge that you can understand what's happening behind the covers by reading through the source code for the shell - line 8500 in the source code listing. &lt;/p&gt;
&lt;p&gt;The core &lt;code&gt;while&lt;/code&gt; loop the shell executes is shown below. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt; // Read and run input commands.
 while(getcmd(buf, sizeof(buf)) &amp;gt;= 0){
    if(buf[0] == ’c’ &amp;amp;&amp;amp; buf[1] == ’d’ &amp;amp;&amp;amp; buf[2] == ’ ’){
        // Clumsy but will have to do for now.
        // Chdir has no effect on the parent if run in the child.
        buf[strlen(buf)−1] = 0; // chop \n

        if(chdir(buf+3) &amp;lt; 0)
            printf(2, &amp;quot;cannot cd %s\n&amp;quot;, buf+3);
        continue;
    }
    if(fork1() == 0)
        runcmd(parsecmd(buf));
    wait();
 }
 exit();
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This loop gets a command from a user, checks if it's the &lt;code&gt;cd&lt;/code&gt; command and attempts to change directory if it is, otherwise it forks, and runs the entered command in the child process. I personally love how simple and enjoyable the code is to read - check out the rest of the listing for &lt;code&gt;sh.c&lt;/code&gt; in the xv6 source code pdf - it's only 400 lines of code and a delight to read.&lt;/p&gt;
&lt;p&gt;This was only a brief peek and excitement builder for xv6 - there's so many other facets that are worth having a deeper dive into. Join next time when I'll step through and explore the xv6 bootstrap sequence!&lt;/p&gt;</summary></entry><entry><title>Startup Catalyst 2015: I'm off to Silicon Valley!</title><link href="http://www.samlewis.me/2015/09/startup-catalyst-2015" rel="alternate"></link><published>2015-09-24T00:00:00+10:00</published><updated>2015-09-24T00:00:00+10:00</updated><author><name>Sam Lewis</name></author><id>tag:www.samlewis.me,2015-09-24:2015/09/startup-catalyst-2015</id><summary type="html">&lt;p&gt;In just two short sleeps, I'll be jetting off to Silicon Valley as part of the &lt;a href="" title="http:/www.startupcatalyst.com.au/"&gt;Startup Catalyst&lt;/a&gt; program. The program was instigated by Australian entrepreneur/mentor/investor Steve Baxter (who is now a 'shark' on the Australian version of Shark Tank) and aims to expose a group of under 25s (affectionately referred to as 'youths') with technical backgrounds to the startup culture in Silicon Valley.&lt;/p&gt;
&lt;p&gt;I'll be headed over with 19 other awesome youths from a variety of different backgrounds - spanning robotics to UI - and over the 10 days that we're in San Francisco we'll visit a whole bunch of tech companies (Google, Facebook and Twitter to name just a few!), have the chance to chat to startup founders and technical whizzes, attend tech meetups and even participate in a startup weekend. Sound like a lot for 10 days? It is! The schedule is completely packed with awesome events and as we were told by Steve and Colin (the project director and technology lead, respectively), they don’t want to kill us - just nearly kill us. &lt;/p&gt;
&lt;p&gt;&lt;img alt="Catalyst Group" src="/images/cataylstgroup.png" /&gt;
&lt;div style="text-align:center"&gt;
&lt;em&gt;The 2015 Catalyst group&lt;/em&gt;
&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;I'm only a recent convert to the startup world, having participated in my first 'Startup Weekend' (an event where you literally create a startup during the course of the weekend!) where I, and 3 others, created &lt;a href="http://www.drivevibe.co"&gt;Drivevibe&lt;/a&gt;. I've been bit by the bug ever since, the Startup Mentality of 'just getting it done', is just so infectious and motivational.&lt;/p&gt;
&lt;p&gt;I've always wanted to use my combination of skills, spanning my background in Electrical Engineering, current work in the Software development space and my interest in data analytics/machine learning to work on challenging problems and hopefully effect a positive change in the world. For this reason, having this chance to go to Silicon Valley, absorb the culture and make connections is so incredibly exciting.&lt;/p&gt;
&lt;p&gt;I'm so excited to experience everything San Francisco has to offer with my cohort of amazingly talented youths. Even though the trip is only 10 days short, I'm sure the impacts of it will be very long lasting. Of course, none of this would be possible without the great help from the Startup Catalyst sponsors and supporters who have made this trip possible. A huge shout out to sponsors &lt;a href="https://www.qut.edu.au/business"&gt;QUT Business School&lt;/a&gt;, &lt;a href="http://www.blacksheepcapital.com.au/"&gt;Black Sheep Capital&lt;/a&gt;, &lt;a href="https://www.griffith.edu.au/"&gt;Griffith University&lt;/a&gt;, &lt;a href="http://www.virginaustralia.com"&gt;Virgin Australia&lt;/a&gt;, &lt;a href="http://www.suncorp.com.au"&gt;Suncorp&lt;/a&gt; and the &lt;a href="http://www.qld.gov.au/dsitia/initiatives/startup-qld/"&gt;Queensland Government&lt;/a&gt; and supporters &lt;a href="https://aws.amazon.com/"&gt;AWS&lt;/a&gt;, &lt;a href="http://www.rivercitylabs.net"&gt;River City Labs&lt;/a&gt;, &lt;a href="http://ww.uber.com"&gt;Uber&lt;/a&gt;, &lt;a href="https://startupaus.org"&gt;StartupAus&lt;/a&gt; and &lt;a href="http://startupqld.org/"&gt;StartupQLD&lt;/a&gt;. A very special thank you to Steve Baxter for instigating and financially backing the program and Peter Laurie and Colin Kinner for making it all happen.&lt;/p&gt;
&lt;p&gt;If you'll be in the San Francisco area while I'll be over there (28th of September to 7th of October) I'd love to shout you a coffee and geek out about whatever you’re passionate about! In the meantime, follow me on twitter to get all the hot goss from the trip!&lt;/p&gt;
&lt;script&gt;window.twttr = (function(d, s, id) {
  var js, fjs = d.getElementsByTagName(s)[0],
    t = window.twttr || {};
  if (d.getElementById(id)) return t;
  js = d.createElement(s);
  js.id = id;
  js.src = "https://platform.twitter.com/widgets.js";
  fjs.parentNode.insertBefore(js, fjs);

  t._e = [];
  t.ready = function(f) {
    t._e.push(f);
  };

  return t;
}(document, "script", "twitter-wjs"));&lt;/script&gt;

&lt;p&gt;&lt;a class="twitter-follow-button"
  href="https://twitter.com/awesamlewis"
  data-size="large"
data-show-count=”false”&gt;
Follow @awesamlewis&lt;/a&gt;&lt;/p&gt;</summary></entry><entry><title>Using the MSP432 serial (eUSCI) modules</title><link href="http://www.samlewis.me/2015/05/using-msp432-eUSCI" rel="alternate"></link><published>2015-05-23T00:00:00+10:00</published><updated>2015-05-23T00:00:00+10:00</updated><author><name>Sam Lewis</name></author><id>tag:www.samlewis.me,2015-05-23:2015/05/using-msp432-eUSCI</id><summary type="html">&lt;p&gt;As a follow up to &lt;a href="../msp432-serial-printf/"&gt;my post on MSP432 printf functionality&lt;/a&gt;, this is a write-up of my notes on using the serial modules on the MSP432. &lt;/p&gt;
&lt;p&gt;The MSP432 has two different types of serial modules; eUSCI_A modules and eUSCI_B modules. The eUSCI_A modules support both the UART and SPI protocols while the eUSCI_B modules support the SPI and I2C protocols. Using the &lt;a href="http://www.ti.com/lit/ds/slas826a/slas826a.pdf"&gt;MSP432 datasheet&lt;/a&gt; you can find which MSP432 pins correspond to the modules. The following picture, which is an excerpt from page 10 of the data sheet shows the pin mapping for the first eUSCI_A and eUSCI_B modules.&lt;/p&gt;
&lt;p&gt;&lt;img alt="MSP432 serial modules" src="/images/serial_modules.png" /&gt;&lt;/p&gt;
&lt;p&gt;As each of the two modules support multiple protocols, you might not need to use all of the pins when you're using one of the modules. For example, if you wanted to use eUSCI_A0 for UART, you wouldn't need a 'slave transmit enable' pin or a 'clock signal input/output'. So you'd only be using P1.2 and P1.3. In fact, these are exactly the two pins you're using when you're communicating with your PC over UART as described in &lt;a href="../msp432-serial-printf/"&gt;my previous post&lt;/a&gt;! &lt;/p&gt;
&lt;p&gt;So now you know which pins to use, but how do you actually configure and use them? A word of warning first though: on the MSP432 launchpad, not all the eUSCI modules have pins exposed on the launchpad, so first check that the module you want has the relevant pins exposed on the launchpad. I've been playing around with a ESP8266 chip which talks over UART and have been using the eUSCI_A2 module which is on pins P3.2 and P3.3.&lt;/p&gt;
&lt;p&gt;To configure the serial modules you have two choices; either read the &lt;a href="http://www.ti.com/lit/ug/slau356a/slau356a.pdf"&gt;family guide&lt;/a&gt; and toggle bits in all of the configuration registers manually or let TI do the heavy heavy lifting and use their &lt;a href="http://software-dl.ti.com/msp430/msp430_public_sw/mcu/msp430/MSP432_Driver_Library/latest/exports/driverlib/doc/MSP432P4xx/MSP432_DriverLib_Users_Guide-MSP432P4xx-2_20_00_08.pdf"&gt;driverlib&lt;/a&gt;. The driverlib is good but can be frustrating to use as the documentation provided is fairly minimal and you need to have an idea of what you're looking for first. &lt;/p&gt;
&lt;p&gt;As an example of using the driverlib to configure a serial module, I'll step through the process of configuring the eUSCI_A2 module for UART with a baud rate of 9600 so that it can talk to my ESP8266 chip. The process should be similar for any serial chip that you want to interface with your MSP432 though!&lt;/p&gt;
&lt;p&gt;First thing first, we want to put the pins in UART mode. The pins we're specifically interested in are P3.2 and P3.3, they correspond to the RX and TX pins respectively. To do this, we need to look at the datasheet again and find where the pin functions are defined. The following picture is an excerpt from page 104 of the datasheet.&lt;/p&gt;
&lt;p&gt;&lt;img alt="MSP432 serial modules" src="/images/eUSCI_A2_control.png" /&gt;&lt;/p&gt;
&lt;p&gt;An 'X' in the P3DIR column indicates a "don't care". So for both pins, it doesn't matter if we set them to an output or an input when configuring them for UART. For the P3SEL1 and P3SEL0 columns, we need to consult the family guide. The next picture is an excerpt from page 483 of the family guide. &lt;/p&gt;
&lt;p&gt;&lt;img alt="MSP432 serial modules" src="/images/GPIO_selection.png" /&gt;&lt;/p&gt;
&lt;p&gt;So to use the UART functionality of these pins, we're using the 'primary IO module function'. Now we have all the information we need to set the pins up in UART mode! Because it doesn't matter whether the pins are in output or input mode, we're able to use the &lt;code&gt;GPIO_setAsPeripheralModuleFunctionInputPin&lt;/code&gt; function or the &lt;code&gt;GPIO_setAsPeripheralModuleFunctionOutputPin&lt;/code&gt; function. For no reason whatsoever, I'll use the output variant. The result is the following line of code:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cm"&gt;/* Set pins 2 and 3 of port 3 to the primary module function (UART) */&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
GPIO_setAsPeripheralModuleFunctionInputPin&lt;span class="o"&gt;(&lt;/span&gt;GPIO_PORT_P3&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;GPIO_PIN2&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;GPIO_PIN3&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;GPIO_PRIMARY_MODULE_FUNCTION&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="err"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The next thing to do is to define a eUSCI config. This is basically from the TI provided examples. The only tricky bit is generating the BRDIV, UCxBRF and UCxBRS numbers which in this case are 78, 2 &amp;amp; 0. Luckily, once again TI have &lt;a href="http://software-dl.ti.com/msp430/msp430_public_sw/mcu/msp430/MSP430BaudRateConverter/index.html"&gt;provided a tool&lt;/a&gt; to do this. This tool finds the optimal way of prescaling and modulating the clock source you're using to achieve your desired baud rate. More information about this process is on page 721 of the family guide. &lt;/p&gt;
&lt;p&gt;Using the tool with a clock of 12MHz and baud rate of 9600 Hz, gives a clockPrescalar of 78, a firstModReg of 2, a secondModReg of 0 and oversampling turned on. Converting this into a config, we get the following:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;const eUSCI_UART_Config uartConfig =
{
    EUSCI_A_UART_CLOCKSOURCE_SMCLK,          // SMCLK Clock Source
    78,                                      // BRDIV = 78
    2,                                       // UCxBRF = 2
    0,                                       // UCxBRS = 0
    EUSCI_A_UART_NO_PARITY,                  // No Parity
    EUSCI_A_UART_LSB_FIRST,                  // MSB First
    EUSCI_A_UART_ONE_STOP_BIT,               // One stop bit
    EUSCI_A_UART_MODE,                       // UART mode
    EUSCI_A_UART_OVERSAMPLING_BAUDRATE_GENERATION  // Oversampling
};
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The parity, MSB/LSB first and the amount of stop bits will all be determined by the device or chip that you want to communicate with. Now, to use that config to initialise the module using driverlib:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;UART_initModule(EUSCI_A2_MODULE, &amp;amp;uartConfig);
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This sets all the relevant registers to achieve the configuration earlier specified. If you're really interesting in understanding what exactly this is doing, it's worth reading the family guide. Now that the module is intialised, it can finally be enabled on!&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;UART_enableModule(EUSCI_A2_MODULE);
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;From here, you can send a byte of data to the module with the following driverlib function call:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cm"&gt;/* sends the &amp;#39;g&amp;#39; character to the A2 module&amp;#39; */&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
UART_transmitData&lt;span class="o"&gt;(&lt;/span&gt;EUSCI_A2_MODULE&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;#39;g&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="err"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If you want to simplify the process of sending individual characters (or instead want to send strings/numbers etc), check out &lt;a href="../msp432-serial-printf/"&gt;my post about a printf function for the MSP432&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The whole code would then end up looking like this.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;quot;driverlib.h&amp;quot;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;

&lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="n"&gt;eUSCI_UART_Config&lt;/span&gt; &lt;span class="n"&gt;uartConfig&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;EUSCI_A_UART_CLOCKSOURCE_SMCLK&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;          &lt;span class="c1"&gt;// SMCLK Clock Source&lt;/span&gt;
    &lt;span class="mi"&gt;78&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;                                     &lt;span class="c1"&gt;// BRDIV = 78&lt;/span&gt;
    &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;                                       &lt;span class="c1"&gt;// UCxBRF = 2&lt;/span&gt;
    &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;                                       &lt;span class="c1"&gt;// UCxBRS = 0&lt;/span&gt;
    &lt;span class="n"&gt;EUSCI_A_UART_NO_PARITY&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;                  &lt;span class="c1"&gt;// No Parity&lt;/span&gt;
    &lt;span class="n"&gt;EUSCI_A_UART_LSB_FIRST&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;                  &lt;span class="c1"&gt;// MSB First&lt;/span&gt;
    &lt;span class="n"&gt;EUSCI_A_UART_ONE_STOP_BIT&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;               &lt;span class="c1"&gt;// One stop bit&lt;/span&gt;
    &lt;span class="n"&gt;EUSCI_A_UART_MODE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;                       &lt;span class="c1"&gt;// UART mode&lt;/span&gt;
    &lt;span class="n"&gt;EUSCI_A_UART_OVERSAMPLING_BAUDRATE_GENERATION&lt;/span&gt;  &lt;span class="c1"&gt;// Oversampling&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;


&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="cm"&gt;/* Halting WDT  */&lt;/span&gt;
    &lt;span class="n"&gt;WDT_A_holdTimer&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;


    &lt;span class="cm"&gt;/* Configure pins P3.2 and P3.3 in UART mode.&lt;/span&gt;
&lt;span class="cm"&gt;     * Doesn&amp;#39;t matter if they are set to inputs or outputs&lt;/span&gt;
&lt;span class="cm"&gt;     */&lt;/span&gt;
    &lt;span class="n"&gt;GPIO_setAsPeripheralModuleFunctionInputPin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;GPIO_PORT_P3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="n"&gt;GPIO_PIN2&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;GPIO_PIN3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;GPIO_PRIMARY_MODULE_FUNCTION&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="cm"&gt;/* Setting DCO (clock) to 12MHz */&lt;/span&gt;
    &lt;span class="n"&gt;CS_setDCOCenteredFrequency&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;CS_DCO_FREQUENCY_12&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="cm"&gt;/* Configuring UART Module */&lt;/span&gt;
    &lt;span class="n"&gt;UART_initModule&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;EUSCI_A2_MODULE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;uartConfig&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="cm"&gt;/* Enable UART module */&lt;/span&gt;
    &lt;span class="n"&gt;UART_enableModule&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;EUSCI_A2_MODULE&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="cm"&gt;/* Send the &amp;#39;g&amp;#39; character over UART */&lt;/span&gt;
        &lt;span class="n"&gt;UART_transmitData&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;EUSCI_A2_MODULE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="sc"&gt;&amp;#39;g&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Hopefully that's helpful in understanding a little bit about configuring the serial modules on the MSP432. If you have a question or just want to yell at me for getting something completely wrong, don't hesitate to reach out. &lt;/p&gt;
&lt;p&gt;If there's interest in learning more about the MSP432's serial, in particular setting up and using interrupts, let me know. :)&lt;/p&gt;</summary></entry><entry><title>MSP432 serial printf</title><link href="http://www.samlewis.me/2015/05/msp432-serial-printf" rel="alternate"></link><published>2015-05-17T00:00:00+10:00</published><updated>2015-05-17T00:00:00+10:00</updated><author><name>Sam Lewis</name></author><id>tag:www.samlewis.me,2015-05-17:2015/05/msp432-serial-printf</id><summary type="html">&lt;p&gt;While the &lt;a href="http://www.ti.com/lsds/ti/microcontrollers_16-bit_32-bit/msp/low_power_performance/msp432p4x/getting_started.page?paramCriteria=no"&gt;MSP432&lt;/a&gt;, does seem to be an kickin' rad microcontroller, I've noticed a distinct lack of resources online to do the most basic microcontrolley stuff.&lt;/p&gt;
&lt;p&gt;So this is a quick bit of code to get a serial/UART connection up and going from the MSP432 to your computer over the USB connection. Perfect for any debugging that you might want to do, or communication with other serial devices (for example the exciting ESP8266 which I'll cover in a later blog post).&lt;/p&gt;
&lt;p&gt;The MSP432-printf library, which is largely from 43oh member OPossum (&lt;a href="http://www.msp430launchpad.com/2012/06/using-printf.html"&gt;printf for the MSP430&lt;/a&gt;), lets you print to any serial module using standard printf syntax. For example: &lt;code&gt;printf(EUSCI_A0_MODULE, "String one: %d", 1)&lt;/code&gt;. The code for the library can be &lt;a href="https://github.com/samvrlewis/MSP432-printf/blob/master/printf.c"&gt;found on my GitHub&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;An example of using this printf library with the MSP432 is shown below. &lt;/p&gt;
&lt;script src="http://gist-it.appspot.com/https://github.com/samvrlewis/MSP432-printf/blob/master/printf_example.c"&gt;
&lt;/script&gt;

&lt;p&gt;The code configures &lt;code&gt;EUSCI_A0_MODULE&lt;/code&gt; to be used and then prints to it. &lt;code&gt;EUSCI_A0_MODULE&lt;/code&gt; is, by default the application UART that you can connect to over USB from your PC. One thing to note is to make sure that &lt;code&gt;EUSCI_A_UART_LSB_FIRST&lt;/code&gt; is set in the UART config, rather than &lt;code&gt;EUSCI_A_UART_MSB_FIRST&lt;/code&gt;. &lt;a href="http://en.wikipedia.org/wiki/Serial_port"&gt;According to wikipedia&lt;/a&gt;, MSB first serial communication is rarely used and it's much more common to use little endian or LSB first communications. If you use a program like PuTTY, it's likely that it'll interpret the serial stream as little endian.&lt;/p&gt;
&lt;p&gt;To connect to the MSP432, I use &lt;a href="http://www.chiark.greenend.org.uk/~sgtatham/putty/"&gt;PuTTY&lt;/a&gt;. On my PC, the MSP432 is on COM1. It's possible to configure and use serial modules other than &lt;code&gt;EUSCI_A0_MODULE&lt;/code&gt; but this may involve some &lt;a href="http://www.ti.com/lit/ds/slas826a/slas826a.pdf"&gt;datasheet&lt;/a&gt; investigation!&lt;/p&gt;</summary></entry><entry><title>AFL statistics SQL database</title><link href="http://www.samlewis.me/2015/02/afl-stats-sql" rel="alternate"></link><published>2015-02-21T00:00:00+10:00</published><updated>2015-02-21T00:00:00+10:00</updated><author><name>Sam Lewis</name></author><id>tag:www.samlewis.me,2015-02-21:2015/02/afl-stats-sql</id><summary type="html">&lt;p&gt;The AFL stats database (and some relevant code) is &lt;a href="https://github.com/samvrlewis/afl-stats-database"&gt;on github&lt;/a&gt;!
&lt;iframe src="https://ghbtns.com/github-btn.html?user=samvrlewis&amp;repo=afl-stats-database&amp;type=star&amp;count=true" frameborder="0" scrolling="0" width="170px" height="20px"&gt;&lt;/iframe&gt;&lt;/p&gt;
&lt;p&gt;Download the SQL(ite) stats database here: &lt;a href="https://github.com/samvrlewis/afl-stats-database/raw/master/afl-stats.sqlite"&gt;afl-stats.sqlite&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The SQLite database has team statistics for each season and finals game for 1987-2014. In the earlier years not all stats are present as they were not all recorded. The database schema is shown below, which also shows the type of stats avaliable. &lt;/p&gt;
&lt;p&gt;&lt;img alt="db schema" src="https://raw.githubusercontent.com/samvrlewis/afl-stats-database/master/schema.png" /&gt;&lt;/p&gt;
&lt;p&gt;It's great for anyone nerdy who's wanting to do any sort of visualisation of stats, machine learning or just wanting to play around with the data easily. As an example of what can be quickly knocked up using Python in 10 minutes, here's the average amount of tackles in AFL games by year. &lt;/p&gt;
&lt;p&gt;&lt;img alt="tackle count" src="http://i.imgur.com/slv32nI.png" /&gt;&lt;/p&gt;
&lt;p&gt;Some things I think would be interesting to examine, using the data:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;How is the intensity of finals vs. normal season games captured in the statistics? Are there more tackles, is goal kicking less accurate, are there more or less free kicks etc etc?&lt;/li&gt;
&lt;li&gt;Can historical stats be used to make a good tipping/betting system? How accurate would a machine learning algorithm based on the stats be?&lt;/li&gt;
&lt;li&gt;How do attendances change when a team is on a hot or cold streak? Which teams have the most fair weather supporters?&lt;/li&gt;
&lt;li&gt;Are there any teams that consistently are outliers in certain areas despite their position on the ladder? For example, are there any teams that consistently have great goal kicking accuracy regardless of their position on the ladder?&lt;/li&gt;
&lt;li&gt;Which teams do best at home? Away from home? Are there any teams that are consistently bad/good in certain stadiums/states?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Would love to hear from you if you do anything interesting with it though. I'm sure there are lots of cool things that could be done.sda&lt;/p&gt;</summary></entry><entry><title>Automatically tracking my thesis progress</title><link href="http://www.samlewis.me/2014/10/automated-thesis-tracking" rel="alternate"></link><published>2014-10-03T00:00:00+10:00</published><updated>2014-10-03T00:00:00+10:00</updated><author><name>Sam Lewis</name></author><id>tag:www.samlewis.me,2014-10-03:2014/10/automated-thesis-tracking</id><summary type="html">&lt;script src="https://ajax.googleapis.com/ajax/libs/jquery/1.11.1/jquery.min.js"&gt;&lt;/script&gt;

&lt;script src="https://www.google.com/jsapi"&gt;&lt;/script&gt;

&lt;script&gt;

  // onload callback
  function drawChart() {

    var public_key = 'zDaZOadL0XUKgVp5ojgV';

    // JSONP request
    var jsonData = $.ajax({
      url: 'https://data.sparkfun.com/output/' + public_key + '.json',
      data: {page: 1},
      dataType: 'jsonp',
    }).done(function (results) {

      var data = new google.visualization.DataTable();

      data.addColumn('datetime', 'Time');
      data.addColumn('number', 'wordcount');

      $.each(results, function (i, row) {
        data.addRow([
          (new Date(row.timestamp)),
          parseInt(row.wordcount)
        ]);
      });

      var chart = new google.visualization.LineChart($('#chart').get(0));

      chart.draw(data, {
         title: 'Number of words written for my thesis',
            legend: {position: 'none'},
            pointSize: 4
      });

    });

  }

  // load chart lib
  google.load('visualization', '1', {
    packages: ['corechart']
  });

  // call drawChart once google charts is loaded
  google.setOnLoadCallback(drawChart);

&lt;/script&gt;

&lt;div id="chart" style="width: 100%;"&gt;&lt;/div&gt;

&lt;p&gt;In my ongoing quest to procrastinate writing my &lt;a href="http://www.github.com/samvrlewis/thesis/"&gt;thesis&lt;/a&gt; by working on marginally related work so that I still feel vaguely productive, I implemented a simple system to automatically keep track of how many words I've written in my thesis report.  &lt;/p&gt;
&lt;p&gt;Conveniently, I'm using LaTeX to write the thesis report. This allowed me to use the cool &lt;a href="http://app.uio.no/ifi/texcount/"&gt;texcount&lt;/a&gt; script (included in most TeX distributions) to count the number of words in each of the .tex files in my thesis. The good thing about this script is it won't count the LaTeX markup towards my total word count. &lt;/p&gt;
&lt;p&gt;Needing somewhere to store the word count, and because I've been looking for an excuse to use it, I used SparkFun's &lt;a href="https://data.sparkfun.com/"&gt;phant&lt;/a&gt; to create a quick and dirty data stream. The great thing about phant is once you've created the data stream, all that's needed to submit data to it is a single HTTP GET request which is doable in a single line of python. If you're that way inclined, you can see my data stream &lt;a href="https://data.sparkfun.com/streams/zDaZOadL0XUKgVp5ojgV"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Because I'm using git as version control, all that was then needed to tie everything together was a &lt;a href="https://gist.github.com/samvrlewis/8a1522084bc99eda7651"&gt;quick python script&lt;/a&gt; for the pre-commit git hook to count the words in each of my different sections, add them together and submit the total to my data stream on phant. This runs whenever I commit to git -- so whenever I've actually written something useful. Easy! &lt;/p&gt;
&lt;p&gt;It was then simple to hook into the data stream with google charts. A chart with my progress is shown above, will be interesting to see how the line behaves (I'm expecting an exponential rise closer to the due date!). &lt;/p&gt;</summary></entry><entry><title>Using C# to check if audio is playing in Windows</title><link href="http://www.samlewis.me/2014/08/is-audio-playing-windows" rel="alternate"></link><published>2014-08-05T00:00:00+10:00</published><updated>2014-08-05T00:00:00+10:00</updated><author><name>Sam Lewis</name></author><id>tag:www.samlewis.me,2014-08-05:2014/08/is-audio-playing-windows</id><summary type="html">&lt;p&gt;Using the &lt;a href="http://cscore.codeplex.com/"&gt;CSCore&lt;/a&gt; library (easily installed in Visual Studio with Install-Package CSCore) I was able to quickly knock up a prototype that let me check if audio was currently being played on my system.&lt;/p&gt;
&lt;p&gt;The code below is heavily inspired by audio meter code in the EndPointTests file for CSCore.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;using CSCore.CoreAudioAPI;
using System;

namespace AudioPlayingTest
{
    class AudioPlayChecker
    {
        // Gets the default device for the system
        public static MMDevice GetDefaultRenderDevice()
        {
            using (var enumerator = new MMDeviceEnumerator())
            {
                return enumerator.GetDefaultAudioEndpoint(DataFlow.Render, Role.Console);
            }
        }

        // Checks if audio is playing on a certain device
        public static bool IsAudioPlaying(MMDevice device)
        {
            using (var meter = AudioMeterInformation.FromDevice(device))
            {
                return meter.PeakValue &amp;gt; 0;
            }
        }

        static void Main(string[] args)
        {
            Console.WriteLine(IsAudioPlaying(GetDefaultRenderDevice()));
            Console.ReadLine(); //Just so the console window doesn&amp;#39;t close
        }
    }
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The code is hopefully self explanatory but basically gets the default system audio device, then uses the peak value from a audio meter to determine whether audio is playing.&lt;/p&gt;</summary></entry></feed>